#include "buildcfg.h"
#include <KexComm.h>
#include <bcrypt.h>

#define SECURITY_WIN32
#include <Security.h>
#include <schannel.h>

EXTERN PKEX_PROCESS_DATA KexData;

#define BCRYPT_MD2_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x00000001)
#define BCRYPT_MD4_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x00000011)
#define BCRYPT_MD5_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x00000021)
#define BCRYPT_SHA1_ALG_HANDLE              ((BCRYPT_ALG_HANDLE)0x00000031)
#define BCRYPT_SHA256_ALG_HANDLE            ((BCRYPT_ALG_HANDLE)0x00000041)
#define BCRYPT_SHA384_ALG_HANDLE            ((BCRYPT_ALG_HANDLE)0x00000051)
#define BCRYPT_SHA512_ALG_HANDLE            ((BCRYPT_ALG_HANDLE)0x00000061)
#define BCRYPT_RC4_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x00000071)
#define BCRYPT_RNG_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x00000081)
#define BCRYPT_HMAC_MD5_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000091)
#define BCRYPT_HMAC_SHA1_ALG_HANDLE         ((BCRYPT_ALG_HANDLE)0x000000a1)
#define BCRYPT_HMAC_SHA256_ALG_HANDLE       ((BCRYPT_ALG_HANDLE)0x000000b1)
#define BCRYPT_HMAC_SHA384_ALG_HANDLE       ((BCRYPT_ALG_HANDLE)0x000000c1)
#define BCRYPT_HMAC_SHA512_ALG_HANDLE       ((BCRYPT_ALG_HANDLE)0x000000d1)
#define BCRYPT_RSA_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x000000e1)
#define BCRYPT_ECDSA_ALG_HANDLE             ((BCRYPT_ALG_HANDLE)0x000000f1)
#define BCRYPT_AES_CMAC_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000101)
#define BCRYPT_AES_GMAC_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000111)
#define BCRYPT_HMAC_MD2_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000121)
#define BCRYPT_HMAC_MD4_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000131)
#define BCRYPT_3DES_CBC_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000141)
#define BCRYPT_3DES_ECB_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000151)
#define BCRYPT_3DES_CFB_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000161)
#define BCRYPT_3DES_112_CBC_ALG_HANDLE      ((BCRYPT_ALG_HANDLE)0x00000171)
#define BCRYPT_3DES_112_ECB_ALG_HANDLE      ((BCRYPT_ALG_HANDLE)0x00000181)
#define BCRYPT_3DES_112_CFB_ALG_HANDLE      ((BCRYPT_ALG_HANDLE)0x00000191)
#define BCRYPT_AES_CBC_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001a1)
#define BCRYPT_AES_ECB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001b1)
#define BCRYPT_AES_CFB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001c1)
#define BCRYPT_AES_CCM_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001d1)
#define BCRYPT_AES_GCM_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001e1)
#define BCRYPT_DES_CBC_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x000001f1)
#define BCRYPT_DES_ECB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000201)
#define BCRYPT_DES_CFB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000211)
#define BCRYPT_DESX_CBC_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000221)
#define BCRYPT_DESX_ECB_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000231)
#define BCRYPT_DESX_CFB_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000241)
#define BCRYPT_RC2_CBC_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000251)
#define BCRYPT_RC2_ECB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000261)
#define BCRYPT_RC2_CFB_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000271)
#define BCRYPT_DH_ALG_HANDLE                ((BCRYPT_ALG_HANDLE)0x00000281)
#define BCRYPT_ECDH_ALG_HANDLE              ((BCRYPT_ALG_HANDLE)0x00000291)
#define BCRYPT_ECDH_P256_ALG_HANDLE         ((BCRYPT_ALG_HANDLE)0x000002a1)
#define BCRYPT_ECDH_P384_ALG_HANDLE         ((BCRYPT_ALG_HANDLE)0x000002b1)
#define BCRYPT_ECDH_P521_ALG_HANDLE         ((BCRYPT_ALG_HANDLE)0x000002c1)
#define BCRYPT_DSA_ALG_HANDLE               ((BCRYPT_ALG_HANDLE)0x000002d1)
#define BCRYPT_ECDSA_P256_ALG_HANDLE        ((BCRYPT_ALG_HANDLE)0x000002e1)
#define BCRYPT_ECDSA_P384_ALG_HANDLE        ((BCRYPT_ALG_HANDLE)0x000002f1)
#define BCRYPT_ECDSA_P521_ALG_HANDLE        ((BCRYPT_ALG_HANDLE)0x00000301)
#define BCRYPT_RSA_SIGN_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000311)
#define BCRYPT_CAPI_KDF_ALG_HANDLE          ((BCRYPT_ALG_HANDLE)0x00000321)
#define BCRYPT_PBKDF2_ALG_HANDLE            ((BCRYPT_ALG_HANDLE)0x00000331)
#define BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE ((BCRYPT_ALG_HANDLE)0x00000341)
#define BCRYPT_SP80056A_CONCAT_ALG_HANDLE   ((BCRYPT_ALG_HANDLE)0x00000351)
#define BCRYPT_TLS1_1_KDF_ALG_HANDLE        ((BCRYPT_ALG_HANDLE)0x00000361)
#define BCRYPT_TLS1_2_KDF_ALG_HANDLE        ((BCRYPT_ALG_HANDLE)0x00000371)
#define BCRYPT_XTS_AES_ALG_HANDLE           ((BCRYPT_ALG_HANDLE)0x00000381)
#define BCRYPT_HKDF_ALG_HANDLE              ((BCRYPT_ALG_HANDLE)0x00000391)

#define KDF_LABEL               0xD
#define KDF_CONTEXT             0xE
#define KDF_SALT                0xF
#define KDF_ITERATION_COUNT     0x10

#define MAGIC_ALG (('A' << 24) | ('L' << 16) | ('G' << 8) | '0')
#define MAGIC_KEY (('K' << 24) | ('E' << 16) | ('Y' << 8) | '0')

#define BCRYPT_SP800108_CTR_HMAC_ALGORITHM      L"SP800_108_CTR_HMAC"
#define BCRYPT_SP80056A_CONCAT_ALGORITHM        L"SP800_56A_CONCAT"
#define BCRYPT_PBKDF2_ALGORITHM                 L"PBKDF2"
#define BCRYPT_CAPI_KDF_ALGORITHM               L"CAPI_KDF"

typedef enum _TLS_ALGORITHM_USAGE {
	TlsParametersCngAlgUsageKeyExchange,	// Key exchange algorithm. RSA, ECHDE, DHE, etc.
	TlsParametersCngAlgUsageSignature,		// Signature algorithm. RSA, DSA, ECDSA, etc.
	TlsParametersCngAlgUsageCipher,			// Encryption algorithm. AES, DES, RC4, etc.
	TlsParametersCngAlgUsageDigest,			// Digest of cipher suite. SHA1, SHA256, SHA384, etc.
	TlsParametersCngAlgUsageCertSig			// Signature and/or hash used to sign certificate. RSA, DSA, ECDSA, SHA1, SHA256, etc.
} TYPEDEF_TYPE_NAME(TLS_ALGORITHM_USAGE);

typedef struct _CRYPTO_SETTINGS {
	TLS_ALGORITHM_USAGE	AlgorithmUSage;
	UNICODE_STRING		AlgorithmId;
	ULONG				NumberOfChainingModes;
	PUNICODE_STRING		ChainingModes;
	ULONG				MinimumBitLength;
	ULONG				MaximumBitLength;
} TYPEDEF_TYPE_NAME(CRYPTO_SETTINGS);

typedef struct _TLS_PARAMETERS {
	ULONG				NumberOfAlpnIds;
	PUNICODE_STRING		AlpnIds;
	ULONG				DisabledProtocols; // bit field
	ULONG				NumberOfCryptoSettings;
	PCRYPTO_SETTINGS	DisabledCryptoAlgorithms;
	ULONG				Flags;
} TYPEDEF_TYPE_NAME(TLS_PARAMETERS);

#define SCH_CRED_V4 4
#define SCH_CRED_V5 5

// added in win8
#define SCH_SEND_AUX_RECORD 0x00200000

#define SCH_WIN7_VALID_FLAGS (SCH_CRED_NO_SYSTEM_MAPPER | \
							  SCH_CRED_NO_SERVERNAME_CHECK | \
							  SCH_CRED_MANUAL_CRED_VALIDATION | \
							  SCH_CRED_NO_DEFAULT_CREDS | \
						 	  SCH_CRED_AUTO_CRED_VALIDATION | \
						 	  SCH_CRED_USE_DEFAULT_CREDS | \
						 	  SCH_CRED_DISABLE_RECONNECTS | \
						 	  SCH_CRED_REVOCATION_CHECK_END_CERT | \
						 	  SCH_CRED_REVOCATION_CHECK_CHAIN | \
						 	  SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT | \
						 	  SCH_CRED_IGNORE_NO_REVOCATION_CHECK | \
						 	  SCH_CRED_IGNORE_REVOCATION_OFFLINE | \
						 	  SCH_CRED_RESTRICTED_ROOTS | \
						 	  SCH_CRED_REVOCATION_CHECK_CACHE_ONLY | \
						 	  SCH_CRED_CACHE_ONLY_URL_RETRIEVAL | \
						 	  SCH_CRED_MEMORY_STORE_CERT | \
						 	  SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE | \
						 	  SCH_SEND_ROOT_CERT)

// This is the Win10+ version of SCHANNEL_CRED.
// The naming scheme is retarded.
typedef struct _SCH_CREDENTIALS {
	ULONG			Version;					// always 5 (SCH_CRED_V5)
	ULONG			CredentialsFormat;
	ULONG			NumberOfCertificateContexts;
	PCCERT_CONTEXT	*CertificateContexts;
	HCERTSTORE		RootStore;
	ULONG			NumberOfMappers;
	struct _HMAPPER	**Mappers;
	ULONG			SessionLifespan;
	ULONG			Flags;
	ULONG			NumberOfTlsParameters;
	PTLS_PARAMETERS	TlsParameters;
} TYPEDEF_TYPE_NAME(SCH_CREDENTIALS);

typedef enum _ALG_ID {
	ALG_ID_3DES,
	ALG_ID_AES,
	ALG_ID_RC4,
	ALG_ID_SHA256,
	ALG_ID_SHA384,
	ALG_ID_SHA512,
	ALG_ID_SHA1,
	ALG_ID_MD5,
	ALG_ID_MD4,
	ALG_ID_MD2,
	ALG_ID_RSA,
	ALG_ID_DH,
	ALG_ID_ECDH_P256,
	ALG_ID_ECDH_P384,
	ALG_ID_RSA_SIGN,
	ALG_ID_ECDSA_P256,
	ALG_ID_ECDSA_P384,
	ALG_ID_DSA,
	ALG_ID_RNG,
	ALG_ID_SP800108_CTR_HMAC,
	ALG_ID_SP80056A_CONCAT,
	ALG_ID_PBKDF2,
	ALG_ID_CAPI_KDF
} TYPEDEF_TYPE_NAME(ALG_ID);

typedef enum _CHAIN_MODE {
	CHAIN_MODE_CBC,
	CHAIN_MODE_ECB,
	CHAIN_MODE_CFB,
	CHAIN_MODE_CCM,
	CHAIN_MODE_GCM
} TYPEDEF_TYPE_NAME(CHAIN_MODE);

typedef struct _KEY_SYMMETRIC {
	CHAIN_MODE			Mode;
	//ULONG				BlockSize;
	UCHAR*				Vector;
	ULONG				VectorLength;
	UCHAR*				Secret;
	ULONG				SecretLength;
	CRITICAL_SECTION	CriticalSection;
} TYPEDEF_TYPE_NAME(KEY_SYMMETRIC);

typedef struct _KEY_ASYMMETRIC {
	ULONG		BitLength;
	ULONG		Flags;
	DSSSEED		DssSeed;
} TYPEDEF_TYPE_NAME(KEY_ASYMMETRIC);

typedef struct _KEY_OBJECT {
	ULONG				Magic;
	ALG_ID				AlgId;
	UINT64 PrivateData[3];
	union {
		KEY_SYMMETRIC	Symmetric;
		KEY_ASYMMETRIC	Asymmetric;
	} Data;
} TYPEDEF_TYPE_NAME(KEY_OBJECT);

typedef struct _ALGORITHM {
	ULONG		Magic;
	ALG_ID		Id;
	CHAIN_MODE	Mode;
	ULONG		Flags;
} TYPEDEF_TYPE_NAME(ALGORITHM);